Registers
Represented by x, y, z, w.
Valid values 0-7
7 is the program counter


Literals
Represented by <Literal>
An 8 bit number


Booleans
False: 0
True: != 0




Operations


l <Literal> x
* loads the literal value into x


add x y z
* x + y -> z


minus x y z
* x - y -> z


negate x y
* Negates x (multiplies by -1) -> y


 pt x y
* copies the value in x into y
* Pass Through


and x y z
* x (boolean and) y -> z


or x y z
* x (boolean or) y -> z


invert x y
* if x == 0 then 1 -> y
* if x != 0 then 0 -> y


gt x y z
* if x > y then 1 -> z else 0 -> z


e x y z
* if x == y then 1 -> z else 0 -> z


lt x y z
* if x < y then 1 -> z else 0 -> z


Jump Instructions
If the function is true, ALU outputs the new value, else ALU outputs the current Program Counter value


jgt w x y z
* if w > x then y -> z else program counter -> z
* jgt <arg1> <arg2> <new value> <destination register>


je w x y z
* if w == x then y -> z else program counter -> z


jlt w x y z
* if w < x then y -> z else program counter -> z